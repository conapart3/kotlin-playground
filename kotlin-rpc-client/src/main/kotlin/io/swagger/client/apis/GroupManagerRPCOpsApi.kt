/**
 * HTTP RPC demo
 * Exposing RPCOps interfaces as webservices
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.GroupmanagerActivateRequest
import io.swagger.client.models.GroupmanagerSuspendRequest

import io.swagger.client.infrastructure.*

class GroupManagerRPCOpsApi(basePath: kotlin.String = "/api/v1") : ApiClient(basePath) {

    /**
     * 
     * 
     * @return kotlin.Int
     */
    @Suppress("UNCHECKED_CAST")
    fun getGroupmanagerGetprotocolversion(): kotlin.Int {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/groupmanager/getprotocolversion"
        )
        val response = request<kotlin.Int>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Int
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Activates membership of the given party or re-activates suspended member of the group.
     * @param body requestBody 
     * @return void
     */
    fun postGroupmanagerActivate(body: GroupmanagerActivateRequest): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/groupmanager/activate"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Suspends membership of the given party which temporarily prevents it to participate in Membership Group.
     * @param body requestBody 
     * @return void
     */
    fun postGroupmanagerSuspend(body: GroupmanagerSuspendRequest): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/groupmanager/suspend"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
