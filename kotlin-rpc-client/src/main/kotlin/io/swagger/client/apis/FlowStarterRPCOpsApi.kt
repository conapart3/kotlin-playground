/**
 * HTTP RPC demo
 * Exposing RPCOps interfaces as webservices
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.FlowstarterStartflowRequest
import io.swagger.client.models.RpcFlowOutcomeResponse
import io.swagger.client.models.RpcStartFlowResponse

import io.swagger.client.infrastructure.*

class FlowStarterRPCOpsApi(basePath: kotlin.String = "/api/v1") : ApiClient(basePath) {

    /**
     * 
     * Retrieves flow outcome using stateMachineRunId provided. StateMachineRunId can be obtained when flow is started.
     * @param runid Run ID for a previously started flow 
     * @return RpcFlowOutcomeResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getFlowstarterFlowoutcomeRunid(runid: kotlin.String): RpcFlowOutcomeResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/flowstarter/flowoutcome/{runid}".replace("{" + "runid" + "}", "$runid")
        )
        val response = request<RpcFlowOutcomeResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RpcFlowOutcomeResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Retrieves flow outcome using client id provided.
     * @param clientid Client id used for the flow start. 
     * @return RpcFlowOutcomeResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getFlowstarterFlowoutcomeforclientidClientid(clientid: kotlin.String): RpcFlowOutcomeResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/flowstarter/flowoutcomeforclientid/{clientid}".replace("{" + "clientid" + "}", "$clientid")
        )
        val response = request<RpcFlowOutcomeResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RpcFlowOutcomeResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Int
     */
    @Suppress("UNCHECKED_CAST")
    fun getFlowstarterGetprotocolversion(): kotlin.Int {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/flowstarter/getprotocolversion"
        )
        val response = request<kotlin.Int>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Int
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun getFlowstarterRegisteredflows(): kotlin.Array<kotlin.String> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/flowstarter/registeredflows"
        )
        val response = request<kotlin.Array<kotlin.String>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body requestBody 
     * @return RpcStartFlowResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun postFlowstarterStartflow(body: FlowstarterStartflowRequest): RpcStartFlowResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/flowstarter/startflow"
        )
        val response = request<RpcStartFlowResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RpcStartFlowResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
