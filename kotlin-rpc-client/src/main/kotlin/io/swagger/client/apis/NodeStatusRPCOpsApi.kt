/**
 * HTTP RPC demo
 * Exposing RPCOps interfaces as webservices
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.RpcNodeDiagnosticInfo

import io.swagger.client.infrastructure.*

class NodeStatusRPCOpsApi(basePath: kotlin.String = "/api/v1") : ApiClient(basePath) {

    /**
     * 
     * 
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    fun getNodestatusGetnetworkreadinessstatus(): kotlin.Boolean {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/nodestatus/getnetworkreadinessstatus"
        )
        val response = request<kotlin.Boolean>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Boolean
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return RpcNodeDiagnosticInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun getNodestatusGetnodediagnosticinfo(): RpcNodeDiagnosticInfo {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/nodestatus/getnodediagnosticinfo"
        )
        val response = request<RpcNodeDiagnosticInfo>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RpcNodeDiagnosticInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Int
     */
    @Suppress("UNCHECKED_CAST")
    fun getNodestatusGetprotocolversion(): kotlin.Int {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/nodestatus/getprotocolversion"
        )
        val response = request<kotlin.Int>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Int
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
